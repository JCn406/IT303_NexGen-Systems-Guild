1. Database Model in c#

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.EntityFrameworkCore;

namespace ParkTastic
{
    public class ParkTasticContext : DbContext
    {
        public DbSet<User> Users { get; set; }
        public DbSet<ParkingLocation> ParkingLocations { get; set; }
        public DbSet<ParkingSpot> ParkingSpots { get; set; }
        public DbSet<Reservation> Reservations { get; set; }
        public DbSet<Payment> Payments { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            optionsBuilder.UseSqlServer("YourConnectionStringHere");
        }
    }

    public class User
    {
        [Key]
        public int UserID { get; set; }
        public string Username { get; set; }
        public string Password { get; set; }
        public string Email { get; set; }
        public ICollection<Reservation> Reservations { get; set; }
    }

    public class ParkingLocation
    {
        [Key]
        public int LocationID { get; set; }
        public string LocationName { get; set; }
        public int TotalSpots { get; set; }
        public ICollection<ParkingSpot> ParkingSpots { get; set; }
    }

    public class ParkingSpot
    {
        [Key]
        public int SpotID { get; set; }
        public int LocationID { get; set; }
        public string SpotType { get; set; } // e.g., Compact, Electric
        public bool IsAvailable { get; set; }
    }

    public class Reservation
    {
        [Key]
        public int ReservationID { get; set; }
        public int UserID { get; set; }
        public int SpotID { get; set; }
        public DateTime StartTime { get; set; }
        public DateTime EndTime { get; set; }
    }

    public class Payment
    {
        [Key]
        public int PaymentID { get; set; }
        public int ReservationID { get; set; }
        public decimal Amount { get; set; }
        public DateTime PaymentDate { get; set; }
    }
}

2. Core Functionalities

using System;
using System.Linq;

namespace ParkTastic
{
    class Program
    {
        static void Main(string[] args)
        {
            using (var context = new ParkTasticContext())
            {
                context.Database.EnsureCreated();

                Console.WriteLine("Welcome to PARK-TASTIC!");
                Console.WriteLine("Select an option:");
                Console.WriteLine("1. Register");
                Console.WriteLine("2. Login and Reserve a Parking Spot");

                int choice = int.Parse(Console.ReadLine());

                if (choice == 1)
                {
                    RegisterUser(context);
                }
                else if (choice == 2)
                {
                    User user = LoginUser(context);
                    if (user != null)
                    {
                        ShowAvailableSpots(context);
                        MakeReservation(context, user);
                    }
                }
            }
        }

        static void RegisterUser(ParkTasticContext context)
        {
            Console.WriteLine("Enter Username:");
            string username = Console.ReadLine();

            Console.WriteLine("Enter Password:");
            string password = Console.ReadLine();

            Console.WriteLine("Enter Email:");
            string email = Console.ReadLine();

            var user = new User { Username = username, Password = password, Email = email };
            context.Users.Add(user);
            context.SaveChanges();

            Console.WriteLine("Registration successful!");
        }

        static User LoginUser(ParkTasticContext context)
        {
            Console.WriteLine("Enter Username:");
            string username = Console.ReadLine();

            Console.WriteLine("Enter Password:");
            string password = Console.ReadLine();

            var user = context.Users.SingleOrDefault(u => u.Username == username && u.Password == password);

            if (user == null)
            {
                Console.WriteLine("Invalid login.");
                return null;
            }

            Console.WriteLine("Login successful!");
            return user;
        }

        static void ShowAvailableSpots(ParkTasticContext context)
        {
            var availableSpots = context.ParkingSpots.Where(s => s.IsAvailable).ToList();

            Console.WriteLine("Available Parking Spots:");
            foreach (var spot in availableSpots)
            {
                Console.WriteLine($"Spot ID: {spot.SpotID}, Type: {spot.SpotType}");
            }
        }

        static void MakeReservation(ParkTasticContext context, User user)
        {
            Console.WriteLine("Enter Spot ID to reserve:");
            int spotId = int.Parse(Console.ReadLine());

            var spot = context.ParkingSpots.Find(spotId);
            if (spot != null && spot.IsAvailable)
            {
                spot.IsAvailable = false;
                var reservation = new Reservation
                {
                    UserID = user.UserID,
                    SpotID = spotId,
                    StartTime = DateTime.Now,
                    EndTime = DateTime.Now.AddHours(2) // 2-hour reservation
                };

                context.Reservations.Add(reservation);
                context.SaveChanges();

                Console.WriteLine("Reservation successful!");
            }
            else
            {
                Console.WriteLine("Spot not available.");
            }
        }
    }
}
